require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe Manage::DomainsController do

  def mock_domain(stubs={})
    @mock_domain ||= mock_model(Domain, stubs).as_null_object
  end

  describe "GET index" do
    before(:each) do
      @user = User.make!
      sign_in @user
      @mock_domains = mock("domains")
      controller.current_user.should_receive(:domains).and_return(@mock_domains)
    end

    it "assigns all domains as @domains" do
      @mock_domains.should_receive(:all).and_return([mock_domain])
      get :index
      assigns(:domains).should eq([mock_domain])
    end
  end

  describe "GET show" do
    before(:each) do
      @user = User.make!
      sign_in @user
      @mock_domains = mock("domains")
      controller.current_user.should_receive(:domains).and_return(@mock_domains)
    end

    it "assigns the requested domain as @domain" do
      @mock_domains.should_receive(:by_name).with("domain1.test").and_return(mock_domain)
      get :show, :id => "domain1.test"
      assigns(:domain).should be(mock_domain)
    end
  end

  describe "GET new" do
    before(:each) do
      @user = User.make!
      sign_in @user
      @mock_domains = mock("domains")
      controller.current_user.should_receive(:domains).and_return(@mock_domains)
    end

    it "assigns a new domain as @domain" do
      @mock_domains.should_receive(:new).and_return(mock_domain)
      get :new
      assigns(:domain).should be(mock_domain)
    end
  end

  describe "POST create" do
    before(:each) do
      @user = User.make!
      sign_in @user
      @mock_domains = mock("domains")
      controller.current_user.should_receive(:domains).and_return(@mock_domains)
    end

    describe "with valid params" do
      it "assigns a newly created domain as @domain" do
        @mock_domains.should_receive(:new).and_return(mock_domain(:save => true))
        Domain.stub(:new).with({'these' => 'params'}) {  }
        post :create, :domain => {'these' => 'params'}
        assigns(:domain).should be(mock_domain)
      end

      it "redirects to the created domain" do
        @mock_domains.should_receive(:new).and_return(mock_domain(:save => true))
        post :create, :domain => {}
        response.should redirect_to(manage_domains_url)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved domain as @domain" do
        @mock_domains.should_receive(:new).with({'these' => 'params'}).and_return(mock_domain(:save => false))
        post :create, :domain => {'these' => 'params'}
        assigns(:domain).should be(mock_domain)
      end

      it "re-renders the 'new' template" do
        @mock_domains.should_receive(:new).with({}).and_return(mock_domain(:save => false))
        post :create, :domain => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    before(:each) do
      @user = User.make!
      sign_in @user
      @mock_domains = mock("domains")
      controller.current_user.should_receive(:domains).and_return(@mock_domains)
    end


    describe "with valid params" do
      it "updates the requested domain" do
        @mock_domains.should_receive(:by_name).with("domain1.test").and_return(mock_domain)
        mock_domain.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "domain1.test", :domain => {'these' => 'params'}
      end

      it "assigns the requested domain as @domain" do
        @mock_domains.should_receive(:by_name).with("domain1.test").and_return(mock_domain(:update_attributes => true))
        put :update, :id => "domain1.test"
        assigns(:domain).should be(mock_domain)
      end

      it "redirects to the domain" do
        #@mock_domain.should_receive(:name).and_return('domain1.test')
        @mock_domains.should_receive(:by_name).with("domain1.test").and_return(mock_domain(:update_attributes => true))
        put :update, :id => "domain1.test"
        response.should redirect_to(manage_domain_url('domain1.test'))
      end
    end

    describe "with invalid params" do
      it "assigns the domain as @domain" do
        @mock_domains.should_receive(:by_name).with("domain1.test").and_return(mock_domain(:update_attributes => false))
        put :update, :id => "domain1.test"
        assigns(:domain).should be(mock_domain)
      end

      it "re-renders the 'edit' template" do
        @mock_domains.should_receive(:by_name).with("domain1.test").and_return(mock_domain(:update_attributes => false))
        put :update, :id => "domain1.test"
        response.should render_template("show")
      end
    end
  end

  describe "DELETE destroy" do
    before(:each) do
      @user = User.make!
      sign_in @user
      @mock_domains = mock("domains")
      controller.current_user.should_receive(:domains).and_return(@mock_domains)
    end

    it "destroys the requested domain" do
      @mock_domains.should_receive(:by_name).with("domain1.test").and_return(mock_domain)
      mock_domain.should_receive(:destroy)
      delete :destroy, :id => "domain1.test"
    end

    it "redirects to the domains list" do
      @mock_domains.should_receive(:by_name).with("domain1.test").and_return(mock_domain)
      delete :destroy, :id => "domain1.test"
      response.should redirect_to(manage_domains_url)
    end
  end

end
